// Generated by CoffeeScript 1.6.2
(function() {
  var App, Microphone, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Microphone = (function() {
    function Microphone(config) {
      if (config == null) {
        config = null;
      }
      this.save = __bind(this.save, this);
      this.capture = __bind(this.capture, this);
      this.start = __bind(this.start, this);
      this.active = false;
      this.audioContext = new AudioContext();
      this.audioRecorder;
      this.config = $.extend({
        errorHandler: function() {
          return {};
        },
        clipAnalysisHandler: function() {
          return {};
        }
      }, config);
      return;
    }

    Microphone.prototype.start = function() {
      var _this = this;

      return navigator.getUserMedia({
        audio: true
      }, this.capture, function(e) {
        if (e.name === 'PERMISSION_DENIED') {
          return _this.config.errorHandler('You must allow access to your microphone.');
        } else {
          return _this.config.errorHandler('We couldn\'t access your microphone.');
        }
      });
    };

    Microphone.prototype.capture = function(stream) {
      var audioInput, inputPoint, realAudioInput, zeroGain;

      this.active = true;
      inputPoint = this.audioContext.createGain();
      realAudioInput = this.audioContext.createMediaStreamSource(stream);
      audioInput = realAudioInput;
      audioInput.connect(inputPoint);
      this.audioRecorder = new Recorder(inputPoint, {
        workerPath: '/public/js/vendor/recorderWorker.js'
      });
      this.audioRecorder.clear();
      this.audioRecorder.record();
      zeroGain = this.audioContext.createGain();
      zeroGain.gain.value = 0.0;
      inputPoint.connect(zeroGain);
      return zeroGain.connect(this.audioContext.destination);
    };

    Microphone.prototype.save = function() {
      var _this = this;

      return this.audioRecorder.exportWAV(function(blob) {
        _this.config.clipAnalysisHandler(blob);
        return _this.audioRecorder.clear();
      });
    };

    return Microphone;

  })();

  App = (function() {
    function App(config) {
      if (config == null) {
        config = null;
      }
      this.showError = __bind(this.showError, this);
      this.analyzeClip = __bind(this.analyzeClip, this);
      this.bind = __bind(this.bind, this);
      this.ready = __bind(this.ready, this);
      this.config = $.extend({
        selectors: {
          error: '#error'
        },
        endpoints: {
          analyze: '/analyze'
        }
      }, config);
      this.microphone = new Microphone({
        errorHandler: this.showError,
        clipAnalysisHandler: this.analyzeClip
      });
      this.ready();
      this.bind();
    }

    App.prototype.ready = function() {
      navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      if (this.config['rdio_token']) {
        return R.accessToken(this.config['rdio_token']);
      }
    };

    App.prototype.bind = function() {
      var _this = this;

      _this = this;
      $('#start').on('click', function(e) {
        _this.microphone.start();
        return false;
      });
      return $('#export').on('click', function(e) {
        _this.microphone.save();
        return false;
      });
    };

    App.prototype.analyzeClip = function(blob) {
      var reader,
        _this = this;

      reader = new FileReader();
      console.log(blob);
      reader.addEventListener('loadend', function() {
        return $.post(_this.config.endpoints.analyze, {
          blob: reader.result
        }, function(data) {
          return console.log(data);
        });
      });
      return reader.readAsBinaryString(blob);
    };

    App.prototype.showError = function(message) {
      var $error;

      if (message == null) {
        message = null;
      }
      $error = $(this.config.selectors.error);
      if (message) {
        return $error.text(message).slideDown();
      } else {
        return $error.slideUp();
      }
    };

    return App;

  })();

  window.claptwice = new App((_ref = (_ref1 = window.claptwice) != null ? _ref1.config : void 0) != null ? _ref : {});

  $(document).ready(function() {
    return window.claptwice.ready();
  });

}).call(this);
